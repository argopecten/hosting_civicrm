<?php

/**
 * @file
 * Platform node type definition.
 */

/**
 * This civiplatform has been deleted.
 */
define('HOSTING_CIVIPLATFORM_DELETED', -2);

/**
 * This civiplatform has been locked, new sites will not be allowed to use it.
 */
define('HOSTING_CIVIPLATFORM_LOCKED', -1);

/**
 * This civiplatform has been queued for creation.
 */
define('HOSTING_CIVIPLATFORM_QUEUED', 0);

/**
 * This civiplatform is created and enabled, sites may be deployed on it.
 */
define('HOSTING_CIVIPLATFORM_ENABLED', 1);

/**
 * Implements hook_menu().
 */
function hosting_civiplatform_menu() {
  $items = array();

  $items['hosting/civiplatforms/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['hosting/civiplatforms/add'] = array(
    'title' => 'Add civiplatform',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_goto',
    'page arguments' => array('node/add/civiplatform'),
    'access callback' => 'node_access',
    'access arguments' => array('create', 'civiplatform'),
  );

  return $items;
}

/**
 * Implements hook_node_info().
 */
function hosting_civiplatform_node_info() {
  $types["civiplatform"] = array(
    "type" => 'civiplatform',
    "name" => 'CiviCRM Platform',
    'base' => 'hosting_civiplatform',
    "has_title" => TRUE,
    "title_label" => t('Name'),
    "description" => '',
    "has_body" => 0,
    "body_label" => '',
    "min_word_count" => 0,
  );

  return $types;
}

/**
 * Implements hook_hosting_tasks().
 */
function hosting_civiplatform_hosting_tasks() {
  $tasks = array();
  $tasks['civiplatform']['verify'] = array(
    'title' => t('Verify'),
    'description' => t('Verify that the civiplatform is correctly installed and working.'),
    'weight' => 10,
    'provision_save' => TRUE,
  );
  $tasks['civiplatform']['delete'] = array(
    'title' => t('Delete'),
    'description' => t('Deleting this civiplatform will completely remove it from the hosting system.
        This process can not be undone. It can not be performed if you have sites currently
        running on this civiplatform.
        Are you really sure you want to delete this civiplatform?'),
    'weight' => 10,
    'dialog' => TRUE,
  );
  $tasks['civiplatform']['lock'] = array(
    'title' => t('Lock'),
    'description' => t('Locking this civiplatform will not delete or disable it or its sites, but will
        prevent any new sites from being created on it. This may be useful when you have sites that
        cannot be migrated onto a newer civiplatform, but you wish to prevent other users or clients
        from continuing to provision on this civiplatform. The civiplatform can be unlocked later.
        Are you really sure you want to lock this civiplatform?'),
    'weight' => 10,
  );
  $tasks['civiplatform']['unlock'] = array(
    'title' => t('Unlock'),
    'description' => t('Unlocking this civiplatform will allow sites to be provisioned on it.
        Are you really sure you want to unlock this civiplatform?'),
    'weight' => 10,
  );

  return $tasks;
}

/**
 * Implements hook_permission().
 */
function hosting_civiplatform_permission() {
  return array(
    'administer civiplatforms' => array(
      'title' => t('administer civiplatforms'),
    ),
    'create civiplatform' => array(
      'title' => t('create civiplatform'),
    ),
    'view civiplatform' => array(
      'title' => t('view civiplatform'),
    ),
    'edit civiplatform' => array(
      'title' => t('edit civiplatform'),
    ),
    'delete civiplatform' => array(
      'title' => t('delete civiplatform'),
    ),
    'view locked civiplatforms' => array(
      'title' => t('view locked civiplatforms'),
    ),
    'create sites on locked civiplatforms' => array(
      'title' => t('create sites on locked civiplatforms'),
    ),
  );
}

/**
 * Implements hook_node_access().
 * @todo: switch to node access constants
 */
function hosting_civiplatform_node_access($node, $op, $account) {
  if ($op != 'create' && hosting_feature('client')) {
    // We rely on hosting_client_node_grants() instead of global configuration.
    return NULL;
  }

  switch ($op) {
    case 'create':
      return user_access('create civiplatform', $account);

    case 'update':
      return user_access('edit civiplatform', $account);

    case 'view':
      return user_access('view civiplatform', $account);
  }
}

/**
 * Callback for civiplatform verify action.
 *
 * @see: hosting_task_action_info().
 */
function hosting_civiplatform_verify_action($node) {
  hosting_add_task($node->nid, 'verify');
}

/**
 * Callback for civiplatform lock action.
 *
 * @see: hosting_task_action_info().
 */
function hosting_civiplatform_lock_action($node) {
  hosting_add_task($node->nid, 'lock');
}

/**
 * Callback for civiplatform unlock action.
 *
 * @see: hosting_task_action_info().
 */
function hosting_civiplatform_unlock_action($node) {
  hosting_add_task($node->nid, 'unlock');
}

/**
 * Callback for civiplatform delete action.
 *
 * @see: hosting_task_action_info().
 */
function hosting_civiplatform_delete_action($node) {
  hosting_add_task($node->nid, 'delete');
}

/**
 * Helper function to get civiplatforms that haven't been deleted.
 */
function _hosting_get_civiplatforms() {
  $return = array();
  $result = db_query("SELECT n.nid, n.title
                      FROM {node} n
                      LEFT JOIN {hosting_civiplatform} h
                      ON n.nid = h.nid
                      WHERE n.type = :type
                      AND n.status = :nstatus
                      AND h.status <> :hstatus
                      ORDER BY n.title
                     ", array(
                       ':type' => 'civiplatform',
                       ':nstatus' => 1, //@todo: remove magic number?
                       ':hstatus' => HOSTING_CIVIPLATFORM_DELETED,
                     )
                   );
  while ($civiplatform = $result->fetch()) {
    $return[$civiplatform->nid] = $civiplatform->title;
  }
  return $return;
}

/**
 * Helper function to get civiplatforms that haven't been deleted or locked.
 */
function _hosting_get_enabled_civiplatforms() {
  $return = array();
  $result = db_query("SELECT n.nid, n.title
                      FROM {node} n
                      LEFT JOIN {hosting_civiplatform} h
                      ON n.nid = h.nid
                      WHERE n.type = :type
                      AND n.status = :nstatus
                      AND h.status <> :hstatus
                      ORDER BY n.title
                     ", array(
                       ':type' => 'civiplatform',
                       ':nstatus' => 1, //@todo: remove magic number?
                       ':hstatus' => HOSTING_CIVIPLATFORM_LOCKED,
                     )
                   );
  while ($civiplatform = $result->fetch()) {
    $return[$civiplatform->nid] = $civiplatform->title;
  }
  return $return;
}

/**
 * Helper function to get civiplatforms that have been locked.
 */
function _hosting_get_locked_civiplatforms() {
  $return = array();
  $result = db_query("SELECT n.nid, n.title
                      FROM {node} n
                      LEFT JOIN {hosting_civiplatform} h
                      ON n.nid = h.nid
                      WHERE n.type = :type
                      AND n.status = :nstatus
                      AND h.status = :hstatus
                      ORDER BY n.title
                     ", array(
                       ':type' => 'civiplatform',
                       ':nstatus' => NODE_PUBLISHED,
                       ':hstatus' => HOSTING_CIVIPLATFORM_LOCKED,
                     )
                   );
  while ($civiplatform = $result->fetch()) {
    $return[$civiplatform->nid] = $civiplatform->title;
  }
  return $return;
}

/**
 * Helper function to check if a civiplatform is locked.
 */
function _hosting_civiplatform_is_locked($node) {
  if (in_array($node, array_keys(_hosting_get_locked_civiplatforms()))) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_form().
 */
function hosting_civiplatform_form(&$node) {
  $type = node_type_get_type($node);
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#required' => TRUE,
    '#description' => t('Choose a unique descriptive name for your civiplatform. You very likely want this to be something like "Drupal 7.21".'),
    '#size' => 40,
    '#default_value' => $node->title,
    '#maxlength' => 255,
  );

  // allow edition if the node is in creation, or if wasn't verified correctly
  if (!isset($node->nid) || !$node->verified) {
    $form['publish_path'] = array(
      '#type' => 'textfield',
      '#title' => t('Publish path'),
      '#required' => TRUE,
      '#description' => t('The absolute path on the filesystem where the sites will be hosted. This needs to be created manually and initialized before your civiplatform works properly. It also needs to be a unique path not already in use by a civiplatform on any server.<br />For example, run the following shell commands:<pre>%commands</pre>Your publish path is the absolute path to the directory that gets created.<br />You are still required to enter the absolute path above, as it will be treated as the target directory by the makefile.', array('%commands' => "cd /var/aegir/platforms\nmkdir wordpress-x.y\ncivi core download\n")),
      '#size' => 40,
      '#default_value' => isset($node->publish_path) ? $node->publish_path : NULL,
      '#maxlength' => 255,
    );
  }
  else {
    // display it
    $form['info']['publish_path'] = array(
      '#type' => 'item',
      '#title' => t('Publish path'),
      '#markup' => $node->publish_path,
    );
    // send it on form submission
    $form['publish_path'] = array(
      '#type' => 'hidden',
      '#value' => $node->publish_path,
    );
  }

  $servers = hosting_get_servers('http');
  if (count($servers) > 1) {
    $form['web_server'] = array(
      '#type' => 'radios',
      '#title' => t('Web server'),
      '#description' => t('The web server the sites will be hosted on.'),
      '#options' => $servers,
      '#default_value' => isset($node->web_server) ? $node->web_server : HOSTING_DEFAULT_WEB_SERVER,
    );
  }
  else {
    reset($servers);
    $form['web_server'] = array(
      '#type' => 'hidden',
      '#value' => key($servers),
    );
  }

  foreach (array('verified', 'civiplatform_status') as $extra_attribute) {
    $form["$extra_attribute"] = array(
      '#type' => 'value',
      '#value' => isset($node->$extra_attribute) ? $node->$extra_attribute : NULL,
    );
  }

  return $form;
}

/**
 * Hide the delete button on civiplatform nodes.
 */
function hosting_civiplatform_form_alter(&$form, &$form_state, $form_id) {
  // Remove delete button from civiplatform edit form, unless the civiplatform's already been deleted via the Delete task
  if ($form_id == 'civiplatform_node_form') {
    $node = $form['#node'];
    if (isset($node->civiplatform_status) && $node->civiplatform_status !== HOSTING_CIVIPLATFORM_DELETED) {
      $form['actions']['delete']['#type'] = 'hidden';
    }
  }
}

/**
 * Implements hook_insert().
 */
function hosting_civiplatform_insert($node) {
  if (!isset($node->no_verify)) {
    hosting_add_task($node->nid, 'verify');
  }
  $id = db_insert('hosting_civiplatform')
    ->fields(array(
      'vid' => $node->vid,
      'nid' => $node->nid,
      'publish_path' => $node->publish_path,
      'verified' => isset($node->verified) ? $node->verified : 0,
      'web_server' => $node->web_server,
      'status' => isset($node->civiplatform_status) ? $node->civiplatform_status : 0,
    ))
    ->execute();
  if (!isset($node->old_vid)) {
    hosting_context_register($node->nid, 'civiplatform_' . preg_replace("/[!\W]/", "", $node->title));
  }
}

/**
 * Implements hook_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 */
function hosting_civiplatform_update($node) {
  // If this is a new node or we're adding a new revision.
  if (!empty($node->revision)) {
    hosting_civiplatform_insert($node);
  }
  else {
    if ($node->civiplatform_status == HOSTING_CIVIPLATFORM_DELETED) {
      $node->no_verify = TRUE;
    }
    db_update('hosting_civiplatform')
      ->fields(array(
        'publish_path' => $node->publish_path,
        'web_server' => $node->web_server,
        'verified' => $node->verified,
        'status' => $node->civiplatform_status,
      ))
      ->condition('nid', $node->nid)
      ->execute();
  }
  if (!isset($node->no_verify)) {
    hosting_add_task($node->nid, 'verify');
  }
}

/**
 * Implements hook_nodeapi_TYPE_OP().
 */
function hosting_nodeapi_civiplatform_delete_revision(&$node) {
  db_delete('hosting_civiplatform')
    ->condition('vid', $node->vid)
    ->execute();
}

/**
 * Implements hook_delete().
 */
function hosting_civiplatform_delete($node) {
  db_delete('hosting_civiplatform')
    ->condition('nid', $node->nid)
    ->execute();
  db_delete('hosting_package_instance')
    ->condition('rid', $node->nid)
    ->execute();

  hosting_context_delete($node->nid);
  hosting_task_delete_related_tasks($node->nid);
  $result = db_query("SELECT distinct nid FROM {hosting_civisite} WHERE civiplatform = :civiplatform", array(':civiplatform' => $node->nid));
  while ($nid = $result->fetch()) {
    node_delete($nid->nid);
  }
}

/**
 * Implements hook_validate().
 */
function hosting_civiplatform_validate($node, &$form) {
  if ($node->op == t('Delete')) {
    return;
  }

  // Make sure the civiplatform name is unique, to avoid context clashes.
  if ($result = db_query("SELECT n.title AS name FROM {hosting_civiplatform} AS h INNER JOIN {node} AS n ON n.nid = h.nid WHERE n.title = :title AND n.nid <> :nid AND h.status >= :status", [':title' => $node->title, ':nid' => $node->nid, ':status' => HOSTING_CIVIPLATFORM_QUEUED])->fetch()) {
    form_set_error('title', t('Platform name %name is already defined. Platform names must be unique across all servers.', array('%name' => $result->name)));
  }
  // Make sure the path is unique. Remote servers can't have the same path to a civiplatform that is in use by another server.
  if ($result = db_query("SELECT n.title AS name FROM {hosting_civiplatform} AS h INNER JOIN {node} AS n ON n.nid = h.nid WHERE publish_path = :publish_path AND n.nid <> :nid AND h.status >= :status", array(':publish_path' => hosting_path_normalize($node->publish_path), ':nid' => $node->nid, ':status' => HOSTING_CIVIPLATFORM_QUEUED))->fetch()) {
    form_set_error('publish_path', t('Path is already in use by civiplatform %name. Platform paths must be unique across all servers.', array('%name' => $result->name)));
  }
  if (is_null($node->web_server)) {
    form_set_error('web_server', t('Platform needs to be associated with a webserver. Make sure you have a verified webserver on this Aegir install!'));
  }
}

/**
 * Implements hook_load().
 */
function hosting_civiplatform_load($nodes) {
  foreach ($nodes as $nid => &$node) {
    $additions = db_query('SELECT publish_path, verified, web_server, status AS civiplatform_status FROM {hosting_civiplatform} WHERE vid = :vid', array(':vid' => $node->vid))->fetch();
    // Avoid PHP 5.4 warning when civiplatform doesn't exist yet.
    // See: https://drupal.org/node/1940378
    $additions = $additions ? $additions : new stdClass();
    $iid = db_query("SELECT iid
                     FROM {hosting_package_instance} i
                     LEFT JOIN {hosting_package} p
                     ON p.nid=i.package_id
                     WHERE p.package_type = :package_type
                     AND i.rid = :rid",
                     array(
                       ':package_type' => 'civiplatform',
                       ':rid' => $node->nid,
                     )
                   )->fetchField();

    $additions->release = hosting_package_instance_load($iid);
    // $additions->profiles = hosting_get_profiles($node->nid, 'short_name');

    foreach ($additions as $property => &$value) {
      $node->$property = $value;
    }
  }
}

/**
 * Menu wildcard loader callback.
 *
 * Loads a hosting_civiplatform node.
 * @see hosting_task_menu()
 *
 * @param int $arg
 *   Node's numeric nid
 *
 * @return bool|object
 */
function hosting_civiplatform_wildcard_load($arg) {
  if (!is_numeric($arg)) {
    return FALSE;
  }
  if ($node = node_load($arg)) {
    if ($node->type == 'civiplatform') {
      return $node;
    }
  }
  return FALSE;
}

/**
 * Implements hook_view().
 */
function hosting_civiplatform_view($node, $teaser = FALSE, $page = FALSE) {

  $node->content['info'] = array(
    '#prefix' => '<div id="hosting-civiplatform-info" class="hosting-info-list">',
    '#suffix' => '</div>',
  );

  $node->content['info']['verified'] = array(
    '#type' => 'item',
    '#title' => t('Verified'),
    '#markup' => hosting_format_interval($node->verified),
    '#weight' => -10,
  );

  $node->content['info']['publish_path'] = array(
    '#type' => 'item',
    '#title' => t('Publish path'),
    '#markup' => filter_xss($node->publish_path),
    '#weight' => -8,
  );

  $node->content['info']['web_server'] = array(
    '#type' => 'item',
    '#title' => t('Web server'),
    '#markup' => _hosting_node_link($node->web_server),
    '#weight' => -7,
  );
  $node->content['info']['status'] = array(
    '#type' => 'item',
    '#title' => t('Status'),
    '#markup' => _hosting_civiplatform_status($node->civiplatform_status),
  );

  if ($node->release) {
    $release = sprintf("%s %s", $node->release->title, $node->release->version);
    $node->content['info']['release'] = array(
      '#type' => 'item',
      '#title' => t('Release'),
      '#markup' => _hosting_node_link($node->release->nid, $release),
      '#weight' => -6,
    );
  }

  // Task list.
  if ($page && $node->nid) {
    $node->content['tasks_view'] = array(
      '#type' => 'item',
      '#markup' => hosting_task_table($node),
      '#prefix' => '<div id="hosting-task-list">',
      '#suffix' => '</div>',
      '#weight' => 9,
    );
    $settings['hostingTaskRefresh'] = array(
      'nid' => $node->nid,
      'changed' => $node->changed,
    );
    drupal_add_js($settings, array('type' => 'setting', 'scope' => JS_DEFAULT));

    drupal_add_js(drupal_get_path('module', 'hosting_task') . '/hosting_task.js');
  }

  return $node;
}

/**
 * Implements hook_hosting_site_site_list_filters().
 */
function hosting_civiplatform_hosting_site_site_list_filters() {
  return array('civiplatform');
}

/**
 * Helper function to map status codes to labels and classes.
 */
function _hosting_civiplatform_status_codes() {
  $codes = array(
    HOSTING_CIVIPLATFORM_QUEUED => array(
      'label' => 'Queued',
      'class' => 'hosting-queue',
    ),
    HOSTING_CIVIPLATFORM_ENABLED => array(
      'label' => 'Enabled',
      'class' => 'hosting-success',
    ),
    HOSTING_CIVIPLATFORM_DELETED => array(
      'label' => 'Deleted',
      'class' => 'hosting-error',
    ),
    HOSTING_CIVIPLATFORM_LOCKED => array(
      'label' => 'Locked',
      'class' => 'hosting-disable',
    ),
  );
  return $codes;
}

/**
 * Return the appropriate status label.
 */
function _hosting_civiplatform_status($status) {
  static $labels;
  $labels = _hosting_civiplatform_status_codes();
  return is_object($status) ? $labels[$status->civiplatform_status]['label'] : $labels[$status]['label'];
}

/**
 * Implements hook_hosting_summary().
 */
function hosting_civiplatform_hosting_summary() {
  $summary = array();
  if (user_access('view locked civiplatforms')) {
    $civiplatforms = _hosting_get_civiplatforms();
    $summary['civiplatforms'] = theme('item_list', array('items' => array_map('_hosting_node_link', array_keys($civiplatforms)), 'title' => t('Platforms')));
  }
  elseif (user_access('view civiplatform')) {
    $civiplatforms = _hosting_get_enabled_civiplatforms();
    $summary['civiplatforms'] = theme('item_list', array('items' => array_map('_hosting_node_link', array_keys($civiplatforms)), 'title' => t('Platforms')));
  }
  return $summary;
}

/**
 * Implements hook_views_api().
 */
function hosting_civiplatform_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'hosting_civiplatform') . '/includes/views',
  );
}

/**
 * Define the classes that correspond to the civiplatform status.
 */
function _hosting_civiplatform_list_class($status) {
  static $labels;
  $labels = _hosting_civiplatform_status_codes();
  return is_object($status) ? $labels[$status->civiplatform_status]['class'] : $labels[$status]['class'];
}


/**
 * Alter the node types on which the Hosting module operates.
 *
 * @param array $types
 *   An array of strings retresentikng node types.
 */
function hosting_civiplatform_hosting_context_node_types_alter(&$types) {
  $types[] = 'civiplatform';
}
